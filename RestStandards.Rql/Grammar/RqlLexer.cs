//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Rql.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RestStandards.Rql.Grammar {
using System;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class RqlLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, VALUE=16, SORT_ORDER=17, 
		VALUE_ARRAY=18, BOOLOP_SHORT=19, OR=20, AND=21, EQ=22, NEQ=23, GT=24, 
		LT=25, GTEQ=26, LTEQ=27, PLUS=28, MINUS=29, ASSIGN=30, OBRK=31, CBRK=32, 
		OPAR=33, CPAR=34, COMMA=35, TRUE=36, FALSE=37, ID=38, INT=39, FLOAT=40, 
		SPACE=41, STRING=42, OTHER=43;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "VALUE", "SORT_ORDER", 
		"VALUE_ARRAY", "BOOLOP_SHORT", "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", 
		"LTEQ", "PLUS", "MINUS", "ASSIGN", "OBRK", "CBRK", "OPAR", "CPAR", "COMMA", 
		"TRUE", "FALSE", "ID", "INT", "FLOAT", "SPACE", "STRING", "OTHER"
	};


	public RqlLexer(ICharStream input)
		: base(input)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'and'", "'or'", "'count'", "'distinct'", "'first'", "'eq'", "'ge'", 
		"'gt'", "'le'", "'lt'", "'ne'", "'limit'", "'in'", "'select'", "'sort'", 
		null, null, null, null, "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", 
		"'>='", "'<='", "'+'", "'-'", "'='", "'['", "']'", "'('", "')'", "','", 
		"'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "VALUE", "SORT_ORDER", "VALUE_ARRAY", "BOOLOP_SHORT", 
		"OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", "MINUS", 
		"ASSIGN", "OBRK", "CBRK", "OPAR", "CPAR", "COMMA", "TRUE", "FALSE", "ID", 
		"INT", "FLOAT", "SPACE", "STRING", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static RqlLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x2-\x112");
		sb.Append("\b\x1\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6");
		sb.Append("\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r");
		sb.Append("\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t\x10\x4\x11\t\x11\x4\x12");
		sb.Append("\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15\x4\x16\t\x16\x4");
		sb.Append("\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B\t\x1B");
		sb.Append("\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t ");
		sb.Append("\x4!\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t");
		sb.Append("(\x4)\t)\x4*\t*\x4+\t+\x4,\t,\x3\x2\x3\x2\x3\x2\x3\x2\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5");
		sb.Append("\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6");
		sb.Append("\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\t\x3\t\x3");
		sb.Append("\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\r\x3\r\x3");
		sb.Append("\r\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\xF\x3\xF");
		sb.Append("\x3\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11");
		sb.Append("\x3\x11\x3\x11\x5\x11\xA0\n\x11\x3\x12\x3\x12\x5\x12\xA4\n\x12");
		sb.Append("\x3\x13\x3\x13\a\x13\xA8\n\x13\f\x13\xE\x13\xAB\v\x13\x3\x13");
		sb.Append("\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3");
		sb.Append("\x16\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19");
		sb.Append("\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3");
		sb.Append("\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3 \x3 \x3!\x3!\x3\"");
		sb.Append("\x3\"\x3#\x3#\x3$\x3$\x3%\x3%\x3%\x3%\x3%\x3&\x3&\x3&\x3&\x3");
		sb.Append("&\x3&\x3\'\x3\'\a\'\xE4\n\'\f\'\xE\'\xE7\v\'\x3(\x6(\xEA\n(");
		sb.Append("\r(\xE(\xEB\x3)\x6)\xEF\n)\r)\xE)\xF0\x3)\x3)\a)\xF5\n)\f)\xE");
		sb.Append(")\xF8\v)\x3)\x3)\x6)\xFC\n)\r)\xE)\xFD\x5)\x100\n)\x3*\x3*\x3");
		sb.Append("*\x3*\x3+\x3+\x3+\x3+\a+\x10A\n+\f+\xE+\x10D\v+\x3+\x3+\x3,");
		sb.Append("\x3,\x2\x2-\x3\x3\x5\x4\a\x5\t\x6\v\a\r\b\xF\t\x11\n\x13\v\x15");
		sb.Append("\f\x17\r\x19\xE\x1B\xF\x1D\x10\x1F\x11!\x12#\x13%\x14\'\x15");
		sb.Append(")\x16+\x17-\x18/\x19\x31\x1A\x33\x1B\x35\x1C\x37\x1D\x39\x1E");
		sb.Append(";\x1F= ?!\x41\"\x43#\x45$G%I&K\'M(O)Q*S+U,W-\x3\x2\b\x4\x2(");
		sb.Append("(~~\x5\x2\x43\\\x61\x61\x63|\x6\x2\x32;\x43\\\x61\x61\x63|\x3");
		sb.Append("\x2\x32;\x5\x2\v\f\xF\xF\"\"\x5\x2\f\f\xF\xF$$\x11D\x2\x3\x3");
		sb.Append("\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2\x2\x2");
		sb.Append("\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11");
		sb.Append("\x3\x2\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3");
		sb.Append("\x2\x2\x2\x2\x19\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2");
		sb.Append("\x2\x2\x2\x1F\x3\x2\x2\x2\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2");
		sb.Append("%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)\x3\x2\x2\x2\x2+\x3\x2\x2");
		sb.Append("\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3\x2\x2\x2\x2\x33");
		sb.Append("\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2\x39\x3");
		sb.Append("\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2");
		sb.Append("\x41\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x2\x45\x3\x2\x2\x2\x2G\x3");
		sb.Append("\x2\x2\x2\x2I\x3\x2\x2\x2\x2K\x3\x2\x2\x2\x2M\x3\x2\x2\x2\x2");
		sb.Append("O\x3\x2\x2\x2\x2Q\x3\x2\x2\x2\x2S\x3\x2\x2\x2\x2U\x3\x2\x2\x2");
		sb.Append("\x2W\x3\x2\x2\x2\x3Y\x3\x2\x2\x2\x5]\x3\x2\x2\x2\a`\x3\x2\x2");
		sb.Append("\x2\t\x66\x3\x2\x2\x2\vo\x3\x2\x2\x2\ru\x3\x2\x2\x2\xFx\x3\x2");
		sb.Append("\x2\x2\x11{\x3\x2\x2\x2\x13~\x3\x2\x2\x2\x15\x81\x3\x2\x2\x2");
		sb.Append("\x17\x84\x3\x2\x2\x2\x19\x87\x3\x2\x2\x2\x1B\x8D\x3\x2\x2\x2");
		sb.Append("\x1D\x90\x3\x2\x2\x2\x1F\x97\x3\x2\x2\x2!\x9F\x3\x2\x2\x2#\xA3");
		sb.Append("\x3\x2\x2\x2%\xA5\x3\x2\x2\x2\'\xAE\x3\x2\x2\x2)\xB0\x3\x2\x2");
		sb.Append("\x2+\xB3\x3\x2\x2\x2-\xB6\x3\x2\x2\x2/\xB9\x3\x2\x2\x2\x31\xBC");
		sb.Append("\x3\x2\x2\x2\x33\xBE\x3\x2\x2\x2\x35\xC0\x3\x2\x2\x2\x37\xC3");
		sb.Append("\x3\x2\x2\x2\x39\xC6\x3\x2\x2\x2;\xC8\x3\x2\x2\x2=\xCA\x3\x2");
		sb.Append("\x2\x2?\xCC\x3\x2\x2\x2\x41\xCE\x3\x2\x2\x2\x43\xD0\x3\x2\x2");
		sb.Append("\x2\x45\xD2\x3\x2\x2\x2G\xD4\x3\x2\x2\x2I\xD6\x3\x2\x2\x2K\xDB");
		sb.Append("\x3\x2\x2\x2M\xE1\x3\x2\x2\x2O\xE9\x3\x2\x2\x2Q\xFF\x3\x2\x2");
		sb.Append("\x2S\x101\x3\x2\x2\x2U\x105\x3\x2\x2\x2W\x110\x3\x2\x2\x2YZ");
		sb.Append("\a\x63\x2\x2Z[\ap\x2\x2[\\\a\x66\x2\x2\\\x4\x3\x2\x2\x2]^\a");
		sb.Append("q\x2\x2^_\at\x2\x2_\x6\x3\x2\x2\x2`\x61\a\x65\x2\x2\x61\x62");
		sb.Append("\aq\x2\x2\x62\x63\aw\x2\x2\x63\x64\ap\x2\x2\x64\x65\av\x2\x2");
		sb.Append("\x65\b\x3\x2\x2\x2\x66g\a\x66\x2\x2gh\ak\x2\x2hi\au\x2\x2ij");
		sb.Append("\av\x2\x2jk\ak\x2\x2kl\ap\x2\x2lm\a\x65\x2\x2mn\av\x2\x2n\n");
		sb.Append("\x3\x2\x2\x2op\ah\x2\x2pq\ak\x2\x2qr\at\x2\x2rs\au\x2\x2st\a");
		sb.Append("v\x2\x2t\f\x3\x2\x2\x2uv\ag\x2\x2vw\as\x2\x2w\xE\x3\x2\x2\x2");
		sb.Append("xy\ai\x2\x2yz\ag\x2\x2z\x10\x3\x2\x2\x2{|\ai\x2\x2|}\av\x2\x2");
		sb.Append("}\x12\x3\x2\x2\x2~\x7F\an\x2\x2\x7F\x80\ag\x2\x2\x80\x14\x3");
		sb.Append("\x2\x2\x2\x81\x82\an\x2\x2\x82\x83\av\x2\x2\x83\x16\x3\x2\x2");
		sb.Append("\x2\x84\x85\ap\x2\x2\x85\x86\ag\x2\x2\x86\x18\x3\x2\x2\x2\x87");
		sb.Append("\x88\an\x2\x2\x88\x89\ak\x2\x2\x89\x8A\ao\x2\x2\x8A\x8B\ak\x2");
		sb.Append("\x2\x8B\x8C\av\x2\x2\x8C\x1A\x3\x2\x2\x2\x8D\x8E\ak\x2\x2\x8E");
		sb.Append("\x8F\ap\x2\x2\x8F\x1C\x3\x2\x2\x2\x90\x91\au\x2\x2\x91\x92\a");
		sb.Append("g\x2\x2\x92\x93\an\x2\x2\x93\x94\ag\x2\x2\x94\x95\a\x65\x2\x2");
		sb.Append("\x95\x96\av\x2\x2\x96\x1E\x3\x2\x2\x2\x97\x98\au\x2\x2\x98\x99");
		sb.Append("\aq\x2\x2\x99\x9A\at\x2\x2\x9A\x9B\av\x2\x2\x9B \x3\x2\x2\x2");
		sb.Append("\x9C\xA0\x5U+\x2\x9D\xA0\x5O(\x2\x9E\xA0\x5Q)\x2\x9F\x9C\x3");
		sb.Append("\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\x9F\x9E\x3\x2\x2\x2\xA0\"\x3\x2");
		sb.Append("\x2\x2\xA1\xA4\x5\x39\x1D\x2\xA2\xA4\x5;\x1E\x2\xA3\xA1\x3\x2");
		sb.Append("\x2\x2\xA3\xA2\x3\x2\x2\x2\xA4$\x3\x2\x2\x2\xA5\xA9\x5? \x2");
		sb.Append("\xA6\xA8\x5!\x11\x2\xA7\xA6\x3\x2\x2\x2\xA8\xAB\x3\x2\x2\x2");
		sb.Append("\xA9\xA7\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAC\x3\x2\x2\x2");
		sb.Append("\xAB\xA9\x3\x2\x2\x2\xAC\xAD\x5\x41!\x2\xAD&\x3\x2\x2\x2\xAE");
		sb.Append("\xAF\t\x2\x2\x2\xAF(\x3\x2\x2\x2\xB0\xB1\a~\x2\x2\xB1\xB2\a");
		sb.Append("~\x2\x2\xB2*\x3\x2\x2\x2\xB3\xB4\a(\x2\x2\xB4\xB5\a(\x2\x2\xB5");
		sb.Append(",\x3\x2\x2\x2\xB6\xB7\a?\x2\x2\xB7\xB8\a?\x2\x2\xB8.\x3\x2\x2");
		sb.Append("\x2\xB9\xBA\a#\x2\x2\xBA\xBB\a?\x2\x2\xBB\x30\x3\x2\x2\x2\xBC");
		sb.Append("\xBD\a@\x2\x2\xBD\x32\x3\x2\x2\x2\xBE\xBF\a>\x2\x2\xBF\x34\x3");
		sb.Append("\x2\x2\x2\xC0\xC1\a@\x2\x2\xC1\xC2\a?\x2\x2\xC2\x36\x3\x2\x2");
		sb.Append("\x2\xC3\xC4\a>\x2\x2\xC4\xC5\a?\x2\x2\xC5\x38\x3\x2\x2\x2\xC6");
		sb.Append("\xC7\a-\x2\x2\xC7:\x3\x2\x2\x2\xC8\xC9\a/\x2\x2\xC9<\x3\x2\x2");
		sb.Append("\x2\xCA\xCB\a?\x2\x2\xCB>\x3\x2\x2\x2\xCC\xCD\a]\x2\x2\xCD@");
		sb.Append("\x3\x2\x2\x2\xCE\xCF\a_\x2\x2\xCF\x42\x3\x2\x2\x2\xD0\xD1\a");
		sb.Append("*\x2\x2\xD1\x44\x3\x2\x2\x2\xD2\xD3\a+\x2\x2\xD3\x46\x3\x2\x2");
		sb.Append("\x2\xD4\xD5\a.\x2\x2\xD5H\x3\x2\x2\x2\xD6\xD7\av\x2\x2\xD7\xD8");
		sb.Append("\at\x2\x2\xD8\xD9\aw\x2\x2\xD9\xDA\ag\x2\x2\xDAJ\x3\x2\x2\x2");
		sb.Append("\xDB\xDC\ah\x2\x2\xDC\xDD\a\x63\x2\x2\xDD\xDE\an\x2\x2\xDE\xDF");
		sb.Append("\au\x2\x2\xDF\xE0\ag\x2\x2\xE0L\x3\x2\x2\x2\xE1\xE5\t\x3\x2");
		sb.Append("\x2\xE2\xE4\t\x4\x2\x2\xE3\xE2\x3\x2\x2\x2\xE4\xE7\x3\x2\x2");
		sb.Append("\x2\xE5\xE3\x3\x2\x2\x2\xE5\xE6\x3\x2\x2\x2\xE6N\x3\x2\x2\x2");
		sb.Append("\xE7\xE5\x3\x2\x2\x2\xE8\xEA\t\x5\x2\x2\xE9\xE8\x3\x2\x2\x2");
		sb.Append("\xEA\xEB\x3\x2\x2\x2\xEB\xE9\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2");
		sb.Append("\xECP\x3\x2\x2\x2\xED\xEF\t\x5\x2\x2\xEE\xED\x3\x2\x2\x2\xEF");
		sb.Append("\xF0\x3\x2\x2\x2\xF0\xEE\x3\x2\x2\x2\xF0\xF1\x3\x2\x2\x2\xF1");
		sb.Append("\xF2\x3\x2\x2\x2\xF2\xF6\a\x30\x2\x2\xF3\xF5\t\x5\x2\x2\xF4");
		sb.Append("\xF3\x3\x2\x2\x2\xF5\xF8\x3\x2\x2\x2\xF6\xF4\x3\x2\x2\x2\xF6");
		sb.Append("\xF7\x3\x2\x2\x2\xF7\x100\x3\x2\x2\x2\xF8\xF6\x3\x2\x2\x2\xF9");
		sb.Append("\xFB\a\x30\x2\x2\xFA\xFC\t\x5\x2\x2\xFB\xFA\x3\x2\x2\x2\xFC");
		sb.Append("\xFD\x3\x2\x2\x2\xFD\xFB\x3\x2\x2\x2\xFD\xFE\x3\x2\x2\x2\xFE");
		sb.Append("\x100\x3\x2\x2\x2\xFF\xEE\x3\x2\x2\x2\xFF\xF9\x3\x2\x2\x2\x100");
		sb.Append("R\x3\x2\x2\x2\x101\x102\t\x6\x2\x2\x102\x103\x3\x2\x2\x2\x103");
		sb.Append("\x104\b*\x2\x2\x104T\x3\x2\x2\x2\x105\x10B\a$\x2\x2\x106\x10A");
		sb.Append("\n\a\x2\x2\x107\x108\a$\x2\x2\x108\x10A\a$\x2\x2\x109\x106\x3");
		sb.Append("\x2\x2\x2\x109\x107\x3\x2\x2\x2\x10A\x10D\x3\x2\x2\x2\x10B\x109");
		sb.Append("\x3\x2\x2\x2\x10B\x10C\x3\x2\x2\x2\x10C\x10E\x3\x2\x2\x2\x10D");
		sb.Append("\x10B\x3\x2\x2\x2\x10E\x10F\a$\x2\x2\x10FV\x3\x2\x2\x2\x110");
		sb.Append("\x111\v\x2\x2\x2\x111X\x3\x2\x2\x2\xE\x2\x9F\xA3\xA9\xE5\xEB");
		sb.Append("\xF0\xF6\xFD\xFF\x109\x10B\x3\b\x2\x2");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace RestStandards.Rql.Grammar
