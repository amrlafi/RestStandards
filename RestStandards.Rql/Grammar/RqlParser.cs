//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Rql.g4 by ANTLR 4.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace RestStandards.Rql.Grammar {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6")]
[System.CLSCompliant(false)]
public partial class RqlParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, VALUE=16, SORT_ORDER=17, 
		VALUE_ARRAY=18, BOOLOP_SHORT=19, OR=20, AND=21, EQ=22, NEQ=23, GT=24, 
		LT=25, GTEQ=26, LTEQ=27, PLUS=28, MINUS=29, ASSIGN=30, OBRK=31, CBRK=32, 
		OPAR=33, CPAR=34, COMMA=35, TRUE=36, FALSE=37, ID=38, INT=39, FLOAT=40, 
		SPACE=41, STRING=42, OTHER=43;
	public const int
		RULE_text = 0, RULE_query = 1, RULE_opr = 2;
	public static readonly string[] ruleNames = {
		"text", "query", "opr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'and'", "'or'", "'count'", "'distinct'", "'first'", "'eq'", "'ge'", 
		"'gt'", "'le'", "'lt'", "'ne'", "'limit'", "'in'", "'select'", "'sort'", 
		null, null, null, null, "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", 
		"'>='", "'<='", "'+'", "'-'", "'='", "'['", "']'", "'('", "')'", "','", 
		"'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "VALUE", "SORT_ORDER", "VALUE_ARRAY", "BOOLOP_SHORT", 
		"OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", "MINUS", 
		"ASSIGN", "OBRK", "CBRK", "OPAR", "CPAR", "COMMA", "TRUE", "FALSE", "ID", 
		"INT", "FLOAT", "SPACE", "STRING", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rql.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	static RqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

	public RqlParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class TextContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RqlParser.Eof, 0); }
		public QueryContext[] query() {
			return GetRuleContexts<QueryContext>();
		}
		public QueryContext query(int i) {
			return GetRuleContext<QueryContext>(i);
		}
		public ITerminalNode[] BOOLOP_SHORT() { return GetTokens(RqlParser.BOOLOP_SHORT); }
		public ITerminalNode BOOLOP_SHORT(int i) {
			return GetToken(RqlParser.BOOLOP_SHORT, i);
		}
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRqlListener typedListener = listener as IRqlListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRqlListener typedListener = listener as IRqlListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRqlVisitor<TResult> typedVisitor = visitor as IRqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 0, RULE_text);
		int _la;
		try {
			State = 17;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6; Match(Eof);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case OPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7; query();
				State = 12;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==BOOLOP_SHORT) {
					{
					{
					State = 8; Match(BOOLOP_SHORT);
					State = 9; query();
					}
					}
					State = 14;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 15; Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		public OprContext opr() {
			return GetRuleContext<OprContext>(0);
		}
		public ITerminalNode OPAR() { return GetToken(RqlParser.OPAR, 0); }
		public ITerminalNode CPAR() { return GetToken(RqlParser.CPAR, 0); }
		public QueryContext[] query() {
			return GetRuleContexts<QueryContext>();
		}
		public QueryContext query(int i) {
			return GetRuleContext<QueryContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RqlParser.COMMA, i);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRqlListener typedListener = listener as IRqlListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRqlListener typedListener = listener as IRqlListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRqlVisitor<TResult> typedVisitor = visitor as IRqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		int _la;
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case T__6:
			case T__7:
			case T__8:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
				EnterOuterAlt(_localctx, 1);
				{
				State = 19; opr();
				}
				break;
			case OPAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 20; Match(OPAR);
				State = 21; opr();
				State = 22; Match(CPAR);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 3);
				{
				State = 24; Match(T__0);
				State = 25; Match(OPAR);
				State = 26; query();
				State = 27; Match(COMMA);
				State = 28; query();
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 29; Match(COMMA);
					State = 30; query();
					}
					}
					State = 35;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 36; Match(CPAR);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 4);
				{
				State = 38; Match(T__1);
				State = 39; Match(OPAR);
				State = 40; query();
				State = 41; Match(COMMA);
				State = 42; query();
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 43; Match(COMMA);
					State = 44; query();
					}
					}
					State = 49;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 50; Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OprContext : ParserRuleContext {
		public ITerminalNode OPAR() { return GetToken(RqlParser.OPAR, 0); }
		public ITerminalNode CPAR() { return GetToken(RqlParser.CPAR, 0); }
		public ITerminalNode[] ID() { return GetTokens(RqlParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(RqlParser.ID, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(RqlParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(RqlParser.COMMA, i);
		}
		public ITerminalNode VALUE() { return GetToken(RqlParser.VALUE, 0); }
		public ITerminalNode INT() { return GetToken(RqlParser.INT, 0); }
		public ITerminalNode VALUE_ARRAY() { return GetToken(RqlParser.VALUE_ARRAY, 0); }
		public ITerminalNode SORT_ORDER() { return GetToken(RqlParser.SORT_ORDER, 0); }
		public OprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRqlListener typedListener = listener as IRqlListener;
			if (typedListener != null) typedListener.EnterOpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRqlListener typedListener = listener as IRqlListener;
			if (typedListener != null) typedListener.ExitOpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRqlVisitor<TResult> typedVisitor = visitor as IRqlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OprContext opr() {
		OprContext _localctx = new OprContext(Context, State);
		EnterRule(_localctx, 4, RULE_opr);
		int _la;
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; Match(T__2);
				State = 55; Match(OPAR);
				State = 56; Match(CPAR);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 57; Match(T__3);
				State = 58; Match(OPAR);
				State = 59; Match(CPAR);
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 60; Match(T__4);
				State = 61; Match(OPAR);
				State = 62; Match(CPAR);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 4);
				{
				State = 63; Match(T__5);
				State = 64; Match(OPAR);
				State = 65; Match(ID);
				State = 66; Match(COMMA);
				State = 67; Match(VALUE);
				State = 68; Match(CPAR);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 5);
				{
				State = 69; Match(T__6);
				State = 70; Match(OPAR);
				State = 71; Match(ID);
				State = 72; Match(COMMA);
				State = 73; Match(VALUE);
				State = 74; Match(CPAR);
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 6);
				{
				State = 75; Match(T__7);
				State = 76; Match(OPAR);
				State = 77; Match(ID);
				State = 78; Match(COMMA);
				State = 79; Match(VALUE);
				State = 80; Match(CPAR);
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 7);
				{
				State = 81; Match(T__8);
				State = 82; Match(OPAR);
				State = 83; Match(ID);
				State = 84; Match(COMMA);
				State = 85; Match(VALUE);
				State = 86; Match(CPAR);
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 8);
				{
				State = 87; Match(T__9);
				State = 88; Match(OPAR);
				State = 89; Match(ID);
				State = 90; Match(COMMA);
				State = 91; Match(VALUE);
				State = 92; Match(CPAR);
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 9);
				{
				State = 93; Match(T__10);
				State = 94; Match(OPAR);
				State = 95; Match(ID);
				State = 96; Match(COMMA);
				State = 97; Match(VALUE);
				State = 98; Match(CPAR);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 10);
				{
				State = 99; Match(T__11);
				State = 100; Match(OPAR);
				State = 101; Match(INT);
				State = 102; Match(CPAR);
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 11);
				{
				State = 103; Match(T__12);
				State = 104; Match(OPAR);
				State = 105; Match(ID);
				State = 106; Match(COMMA);
				State = 107; Match(VALUE_ARRAY);
				State = 108; Match(CPAR);
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 12);
				{
				State = 109; Match(T__13);
				State = 110; Match(OPAR);
				State = 111; Match(ID);
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 112; Match(COMMA);
					State = 113; Match(ID);
					}
					}
					State = 118;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 119; Match(CPAR);
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 13);
				{
				State = 120; Match(T__14);
				State = 121; Match(OPAR);
				State = 122; Match(SORT_ORDER);
				State = 123; Match(ID);
				State = 124; Match(CPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static string _serializedATN = _serializeATN();
	private static string _serializeATN()
	{
	    StringBuilder sb = new StringBuilder();
	    sb.Append("\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3-\x82");
		sb.Append("\x4\x2\t\x2\x4\x3\t\x3\x4\x4\t\x4\x3\x2\x3\x2\x3\x2\x3\x2\a");
		sb.Append("\x2\r\n\x2\f\x2\xE\x2\x10\v\x2\x3\x2\x3\x2\x5\x2\x14\n\x2\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\a\x3\"\n\x3\f\x3\xE\x3%\v\x3\x3\x3\x3\x3\x3\x3\x3");
		sb.Append("\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x30\n\x3\f\x3\xE\x3\x33");
		sb.Append("\v\x3\x3\x3\x3\x3\x5\x3\x37\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3");
		sb.Append("\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4u\n\x4\f\x4\xE\x4x\v\x4");
		sb.Append("\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x80\n\x4\x3\x4\x2");
		sb.Append("\x2\x5\x2\x4\x6\x2\x2\x92\x2\x13\x3\x2\x2\x2\x4\x36\x3\x2\x2");
		sb.Append("\x2\x6\x7F\x3\x2\x2\x2\b\x14\a\x2\x2\x3\t\xE\x5\x4\x3\x2\n\v");
		sb.Append("\a\x15\x2\x2\v\r\x5\x4\x3\x2\f\n\x3\x2\x2\x2\r\x10\x3\x2\x2");
		sb.Append("\x2\xE\f\x3\x2\x2\x2\xE\xF\x3\x2\x2\x2\xF\x11\x3\x2\x2\x2\x10");
		sb.Append("\xE\x3\x2\x2\x2\x11\x12\a\x2\x2\x3\x12\x14\x3\x2\x2\x2\x13\b");
		sb.Append("\x3\x2\x2\x2\x13\t\x3\x2\x2\x2\x14\x3\x3\x2\x2\x2\x15\x37\x5");
		sb.Append("\x6\x4\x2\x16\x17\a#\x2\x2\x17\x18\x5\x6\x4\x2\x18\x19\a$\x2");
		sb.Append("\x2\x19\x37\x3\x2\x2\x2\x1A\x1B\a\x3\x2\x2\x1B\x1C\a#\x2\x2");
		sb.Append("\x1C\x1D\x5\x4\x3\x2\x1D\x1E\a%\x2\x2\x1E#\x5\x4\x3\x2\x1F ");
		sb.Append("\a%\x2\x2 \"\x5\x4\x3\x2!\x1F\x3\x2\x2\x2\"%\x3\x2\x2\x2#!\x3");
		sb.Append("\x2\x2\x2#$\x3\x2\x2\x2$&\x3\x2\x2\x2%#\x3\x2\x2\x2&\'\a$\x2");
		sb.Append("\x2\'\x37\x3\x2\x2\x2()\a\x4\x2\x2)*\a#\x2\x2*+\x5\x4\x3\x2");
		sb.Append("+,\a%\x2\x2,\x31\x5\x4\x3\x2-.\a%\x2\x2.\x30\x5\x4\x3\x2/-\x3");
		sb.Append("\x2\x2\x2\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2");
		sb.Append("\x2\x2\x32\x34\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34\x35\a$\x2");
		sb.Append("\x2\x35\x37\x3\x2\x2\x2\x36\x15\x3\x2\x2\x2\x36\x16\x3\x2\x2");
		sb.Append("\x2\x36\x1A\x3\x2\x2\x2\x36(\x3\x2\x2\x2\x37\x5\x3\x2\x2\x2");
		sb.Append("\x38\x39\a\x5\x2\x2\x39:\a#\x2\x2:\x80\a$\x2\x2;<\a\x6\x2\x2");
		sb.Append("<=\a#\x2\x2=\x80\a$\x2\x2>?\a\a\x2\x2?@\a#\x2\x2@\x80\a$\x2");
		sb.Append("\x2\x41\x42\a\b\x2\x2\x42\x43\a#\x2\x2\x43\x44\a(\x2\x2\x44");
		sb.Append("\x45\a%\x2\x2\x45\x46\a\x12\x2\x2\x46\x80\a$\x2\x2GH\a\t\x2");
		sb.Append("\x2HI\a#\x2\x2IJ\a(\x2\x2JK\a%\x2\x2KL\a\x12\x2\x2L\x80\a$\x2");
		sb.Append("\x2MN\a\n\x2\x2NO\a#\x2\x2OP\a(\x2\x2PQ\a%\x2\x2QR\a\x12\x2");
		sb.Append("\x2R\x80\a$\x2\x2ST\a\v\x2\x2TU\a#\x2\x2UV\a(\x2\x2VW\a%\x2");
		sb.Append("\x2WX\a\x12\x2\x2X\x80\a$\x2\x2YZ\a\f\x2\x2Z[\a#\x2\x2[\\\a");
		sb.Append("(\x2\x2\\]\a%\x2\x2]^\a\x12\x2\x2^\x80\a$\x2\x2_`\a\r\x2\x2");
		sb.Append("`\x61\a#\x2\x2\x61\x62\a(\x2\x2\x62\x63\a%\x2\x2\x63\x64\a\x12");
		sb.Append("\x2\x2\x64\x80\a$\x2\x2\x65\x66\a\xE\x2\x2\x66g\a#\x2\x2gh\a");
		sb.Append(")\x2\x2h\x80\a$\x2\x2ij\a\xF\x2\x2jk\a#\x2\x2kl\a(\x2\x2lm\a");
		sb.Append("%\x2\x2mn\a\x14\x2\x2n\x80\a$\x2\x2op\a\x10\x2\x2pq\a#\x2\x2");
		sb.Append("qv\a(\x2\x2rs\a%\x2\x2su\a(\x2\x2tr\x3\x2\x2\x2ux\x3\x2\x2\x2");
		sb.Append("vt\x3\x2\x2\x2vw\x3\x2\x2\x2wy\x3\x2\x2\x2xv\x3\x2\x2\x2y\x80");
		sb.Append("\a$\x2\x2z{\a\x11\x2\x2{|\a#\x2\x2|}\a\x13\x2\x2}~\a(\x2\x2");
		sb.Append("~\x80\a$\x2\x2\x7F\x38\x3\x2\x2\x2\x7F;\x3\x2\x2\x2\x7F>\x3");
		sb.Append("\x2\x2\x2\x7F\x41\x3\x2\x2\x2\x7FG\x3\x2\x2\x2\x7FM\x3\x2\x2");
		sb.Append("\x2\x7FS\x3\x2\x2\x2\x7FY\x3\x2\x2\x2\x7F_\x3\x2\x2\x2\x7F\x65");
		sb.Append("\x3\x2\x2\x2\x7Fi\x3\x2\x2\x2\x7Fo\x3\x2\x2\x2\x7Fz\x3\x2\x2");
		sb.Append("\x2\x80\a\x3\x2\x2\x2\t\xE\x13#\x31\x36v\x7F");
	    return sb.ToString();
	}

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());


}
} // namespace RestStandards.Rql.Grammar
